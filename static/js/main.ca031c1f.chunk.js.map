{"version":3,"sources":["recoils/data.js","components/fetch.js","recoils/user.js","recoils/info.js","components/Add.jsx","recoils/search.js","components/Top.jsx","components/Edit.jsx","components/Task.jsx","components/Item.jsx","components/List.jsx","components/Loading.jsx","components/Footer.jsx","components/Info.jsx","App.jsx","index.js"],"names":["dataState","atom","key","default","status","all","undone","done","accessToken","url","a","fetch","res","data","json","method","headers","post","body","JSON","stringify","fetching","fetchGET","fetchPOST","fetchDELETE","localStorage","parse","getItem","random","Math","toString","substr","name","gender","email","newUser","setItem","id","userID","createUser","infoState","Add","useState","char","setChar","resetData","useResetRecoilState","user","useRecoilValue","msg","setMsg","useRecoilState","setInfo","loading","document","getElementById","finished","showInfo","classList","remove","user_id","title","value","completed","add","txt","className","onChange","e","target","length","setTimeout","contains","onClick","postNewTask","to","searchState","keyword","Top","search","setSearch","resetSearchVisibility","elem","Fragment","type","placeholder","c","filter","f","includes","Edit","props","nr","item","onUpdate","Task","created_at","updated_at","el","showMoreInfo","x","y","z","onInfo","edit","editTask","querySelectorAll","forEach","onDelete","Item","checkEdited","val","patch","window","confirm","tasks","xmlns","width","height","fill","viewBox","d","info","map","deleteTask","updateTask","returnProperElements","List","setData","downloadData","then","code","updateDataState","catch","err","console","log","start","exact","path","Loading","Footer","Info","App","ReactDOM","render","basename","process","fallback"],"mappings":"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","file":"static/js/main.ca031c1f.chunk.js","sourcesContent":["import { atom } from 'recoil';\r\n// Main data\r\nconst dataState = atom({\r\n    key: 'data',\r\n    default: {\r\n        status: 'NO_DATA',\r\n        all: [],\r\n        undone: [],\r\n        done: []\r\n    }\r\n})\r\n\r\nexport default dataState;","// Server access token\r\nconst accessToken = \"a72dccbb572f8052c337da5c29c96abfe9096b6207999d422cc88b28ec6e55a9\";\r\n\r\n// Default GET method\r\nasync function fetchGET(url) {\r\n    const res = await fetch(url);\r\n    const data = res.json();\r\n    return data;\r\n}\r\n\r\n// Default DELETE method\r\nasync function fetchDELETE(url) {\r\n    const res = await fetch(url, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Authorization':`Bearer ${accessToken}`\r\n        }\r\n    });\r\n    const data = res.json();\r\n    return data;\r\n}\r\n\r\n// Default POST method\r\nasync function fetchPOST(url, method, post) {\r\n    const res = await fetch(url, {\r\n        method: method,\r\n        headers: {\r\n            'Accept':'application/json',\r\n            'Content-Type':'application/json',\r\n            'Authorization':`Bearer ${accessToken}`\r\n        },\r\n        body: JSON.stringify(post)\r\n    })\r\n    const data = res.json();\r\n    return data;\r\n}\r\n\r\nconst fetching = { fetchGET, fetchPOST, fetchDELETE, accessToken };\r\n\r\nexport default fetching;","import { atom } from 'recoil';\r\nimport fetching from '../components/fetch';\r\n\r\nasync function createUser() {\r\n\r\n    if (\"id\" in localStorage) {\r\n        return JSON.parse(localStorage.getItem(\"id\"));\r\n    }\r\n    const random = Math.random().toString(20).substr(2, 20); // Random string with numbers\r\n    // Preparing post data\r\n    const post = {\r\n        name: random,\r\n        gender: \"Male\",\r\n        email: `${random}@what.com`,\r\n        status: \"Active\"\r\n    } \r\n\r\n    const newUser = await fetching.fetchPOST('https://gorest.co.in/public-api/users/', \"POST\", post); // Call a function that creates new user\r\n    localStorage.setItem(\"id\", JSON.stringify(newUser.data.id)); // Save user to localStorage to prevent creating new one after reload\r\n    return newUser.data.id; // Return new id for the recoil value\r\n}\r\n\r\nconst userID = atom({\r\n    key:\"User ID info\",\r\n    default: createUser()\r\n})\r\n\r\nexport default userID;","import { atom } from 'recoil';\r\n// For info screen\r\nconst infoState = atom({\r\n    key: 'info',\r\n    default: ''\r\n})\r\n\r\nexport default infoState;","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useRecoilValue, useResetRecoilState, useRecoilState } from \"recoil\";\r\nimport dataState from \"../recoils/data\";\r\nimport userID from '../recoils/user';\r\nimport infoState from '../recoils/info';\r\nimport fetching from './fetch';\r\n\r\n\r\nfunction Add() {\r\n    const [ char, setChar ] = useState(0), // For character count\r\n    resetData = useResetRecoilState(dataState), // Reset recoil value from data.js to default\r\n    user = useRecoilValue(userID), // Get recoil value from user.js\r\n    [ msg, setMsg ] = useState(''), // Set local state of string\r\n    [ info, setInfo ] = useRecoilState(infoState), \r\n    loading = document.getElementById('loading'), // Loading screen\r\n    finished = document.getElementById('finished'); // Message screen\r\n\r\n    // Adding new task to server\r\n    async function postNewTask() {\r\n\r\n        if (char > 200) { // Max\r\n            showInfo('It\\'s soooo many letters! I\\'m not sure I can handle it :(')\r\n            return;\r\n        } else if (char < 5) { // Min\r\n            showInfo('Oh, come on! Don\\'t give me empty task! At least 5 characters would be nice :)')\r\n            return;\r\n        }\r\n\r\n        loading.classList.remove('invis'); // Turn on loading screen\r\n\r\n        // Prepare post data\r\n        const post = {\r\n            user_id: user,\r\n            title: document.getElementById('title').value,\r\n            completed: false\r\n        }\r\n\r\n        try {\r\n            const data = await fetching.fetchPOST(`https://gorest.co.in/public-api/users/${user}/todos`, \"POST\", post); // POST data to server\r\n            setMsg('New task added succesfully!'); // Prepare message for successful POST\r\n            resetData(); // Reset recoil value from data.js to default\r\n            return data; // Return response for no reason\r\n            \r\n        } catch (err) { // If there is some errors\r\n            setMsg('Ooops, something bad happened to the Internet! Try again later :/');\r\n        } finally {\r\n            finished.classList.remove('invis'); // Show message screen\r\n            loading.classList.add('invis'); // Remove loading sreen\r\n            setChar(0); // Reset character count\r\n        }\r\n    }\r\n\r\n    // Check character count\r\n    function checkCount() {\r\n        if (char > 200) { // Max\r\n            document.getElementById('maxValue').classList.add('red');\r\n        } else if (char <= 200) { // Fine\r\n            if (document.getElementById('maxValue').classList.contains('red')) {\r\n                document.getElementById('maxValue').classList.remove('red');\r\n            }\r\n        }\r\n    }\r\n\r\n    // Show info or error\r\n    function showInfo(txt) {\r\n        setInfo(txt);\r\n        document.getElementById('info').classList.remove('invis');\r\n    };\r\n\r\n    return (\r\n        <div className=\"add\">\r\n            <div className=\"add-title\">\r\n                <h1>Let's add some new challenges!</h1>\r\n            </div>\r\n            <div className=\"add-form\">\r\n                <p><b>{char} / <span id=\"maxValue\">200</span></b></p>\r\n                <textarea id=\"title\" onChange={e => {\r\n                    setChar(e.target.value.length)\r\n                    setTimeout(() => {\r\n                        checkCount();\r\n                    }, 200);\r\n                }}></textarea>\r\n                <br />\r\n                <br />\r\n                <button className=\"btn g m-r\" onClick={() => {\r\n                    postNewTask();\r\n                }}>\r\n                    Add new note!\r\n                </button>\r\n                <Link to=\"/\"><button className=\"btn r\">Go back to list!</button></Link>\r\n            </div>\r\n            <div id=\"finished\" className=\"invis\">\r\n                <span>\r\n                    <h2>{msg}</h2>\r\n                    <Link to=\"/\"><button className=\"btn g\" onClick={() => finished.classList.add('invis')}>Let's go back to work!</button></Link>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default Add;","import { atom } from 'recoil';\r\n// Search engine\r\nconst searchState = atom({\r\n    key: 'search temp data',\r\n    default: {\r\n        keyword: '',\r\n        data: []\r\n    }\r\n})\r\n\r\nexport default searchState;","import React from 'react';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport { Link } from 'react-router-dom';\r\nimport dataState from '../recoils/data';\r\nimport searchState from '../recoils/search';\r\n\r\nfunction Top() {\r\n    const data = useRecoilValue(dataState),\r\n    [ search, setSearch ] = useRecoilState(searchState);\r\n\r\n    function resetSearchVisibility() {\r\n        const elem = document.getElementById('search').classList;\r\n        if (!elem.contains('invis-hide')) {\r\n            elem.add('invis-hide');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"main-title\">\r\n                <h1>Hello! I hope you're feeling great today!</h1>\r\n                <h2>Here's some of your tasks!</h2>\r\n            </div>\r\n            \r\n            <div className=\"main-counter\">\r\n                <span className=\"count m-r\">Filter by</span>\r\n\r\n                <Link className=\"m-t\" to=\"/\">\r\n                    <span className=\"count h m-r\" onClick={() => resetSearchVisibility()}>\r\n                        <i className=\"bi bi-card-checklist green\"></i> All tasks: {data.all.length}\r\n                    </span>\r\n                </Link>\r\n\r\n                <Link className=\"m-t\" to=\"/done\">\r\n                    <span className=\"count h m-r\" onClick={() => resetSearchVisibility()}>\r\n                        <i className=\"bi bi-check-square green\"></i> Tasks done: {data.done.length > 0 ? data.done.length:0}\r\n                    </span>\r\n                </Link>\r\n\r\n                <Link className=\"m-t\" to=\"/undone\">\r\n                    <span className=\"count h m-r\" onClick={() => resetSearchVisibility()}>\r\n                        <i className=\"bi bi-x-square red\"></i> Tasks undone: {data.undone.length > 0 ? data.undone.length:0}\r\n                    </span>\r\n                </Link>\r\n\r\n                <Link to=\"/add\">\r\n                    <div id=\"add\">\r\n                        <i className=\"bi bi-plus-lg\"></i>\r\n                    </div>\r\n                </Link>\r\n\r\n                <Link className=\"m-t\" to=\"/search\">\r\n                    <span className=\"count h\" onClick={() => {\r\n                        const elem = document.getElementById('search').classList;\r\n                        if (elem.contains('invis-hide')) {\r\n                            elem.remove('invis-hide');\r\n                        } else {\r\n                            elem.add('invis-hide');\r\n                        }\r\n                    }}>\r\n                        <i className=\"bi bi-search\"></i>\r\n                    </span>\r\n                </Link>\r\n\r\n                <div className=\"invis-hide\" id=\"search\">\r\n                    <input type=\"text\" placeholder={search.keyword} onChange={c => {\r\n                        const filter = data.all.filter(f => f.title.includes(c.target.value));\r\n                        setSearch({\r\n                            keyword: c.target.value,\r\n                            data: filter\r\n                        });\r\n                    }}/>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Top;","import React, { useState } from 'react';\r\n\r\nfunction Edit(props) {\r\n    const [ char, setChar ] = useState(0); // Character count\r\n    const { nr, txt, item } = props; // Destructuring task props\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"editing-txt\">\r\n                <textarea name=\"edit\" placeholder={txt} id={`edited${nr}`} onChange={e => setChar(e.target.value.length)}></textarea>\r\n                <p>{char} / 200</p>\r\n            </div>\r\n            <button className=\"btn g\" onClick={() => {\r\n                const value = document.getElementById(`edited${nr}`).value;\r\n                props.onUpdate('EDITED', item, value);\r\n            }}>\r\n                Save\r\n            </button>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Edit;","import Edit from './Edit';\r\n\r\nfunction Task(props) {\r\n    const { item, nr } = props, // Destructuring props\r\n    { completed, title, created_at, updated_at } = item; // and also task\r\n\r\n    // Show or hide edit window after clicking EDIT button\r\n    function editTask(x) {\r\n\r\n        const edit = document.getElementById(`edit${x}`).classList;\r\n\r\n        if (edit.contains('invis-hide')) {\r\n            edit.remove('invis-hide');\r\n        } else {\r\n            edit.add('invis-hide');\r\n        }\r\n    }\r\n\r\n    // Hide all edit windows\r\n    function resetTasks() {\r\n        document.querySelectorAll('.editing').forEach(e => {\r\n            if (!e.classList.contains('invis-hide')) e.classList.add('invis-hide')\r\n        })\r\n    }\r\n\r\n    // Show additional info about task (created_at or updated_at)\r\n    function showMoreInfo(nr) {\r\n        const el = document.getElementById(`info${nr}`).classList;\r\n        if (el.contains('show')) {\r\n            el.remove('show');\r\n        } else {\r\n            el.add('show');\r\n        }\r\n    }\r\n\r\n    return ( // divs and spans of every task\r\n        <div className=\"main-list_item\">\r\n            <span className=\"marked\">\r\n                {completed ? <h2><i className=\"bi bi-check-lg green\"></i></h2> : <h2><i className=\"bi bi-x-lg red\"></i></h2>}\r\n                <h2>ToDo #{nr}</h2>\r\n            </span>\r\n            <span className=\"text\">\r\n                <p className=\"point\" onClick={() => showMoreInfo(nr)}>{title}</p>\r\n                <div className=\"text-info fade\" id={`info${nr}`}>\r\n                    <span>Created at: {created_at}</span>\r\n                    <span>Last update: {updated_at}</span>\r\n                </div>\r\n            <div className=\"editing invis-hide\" id={`edit${nr}`}>\r\n                <Edit nr={nr} txt={title} item={item} onUpdate={(x, y, z) => props.onUpdate(x, y, z)} />\r\n            </div>\r\n            </span>\r\n            <span className=\"options\">\r\n                {completed ? <h2 onClick={() => props.onInfo('Firstly you need to undone the task!')}><i className=\"bi bi-pencil edit\"></i></h2>:<h2 onClick={() => editTask(nr)}><i className=\"bi bi-pencil edit\"></i></h2>}\r\n                {completed ? <h2 onClick={() => props.onUpdate('UNDONE', item)}><i className=\"bi bi-x-lg undone\"></i></h2>:<h2 onClick={() => {resetTasks();props.onUpdate('DONE', item)}}><i className=\"bi bi-check-lg done\"></i></h2>}\r\n                <h2 onClick={() => props.onDelete(item)}><i className=\"bi bi-trash trash\"></i></h2>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task;","import { useRecoilValue, useResetRecoilState, useRecoilState } from 'recoil';\r\nimport Top from './Top';\r\nimport Task from './Task';\r\nimport dataState from '../recoils/data';\r\nimport searchState from '../recoils/search';\r\nimport infoState from '../recoils/info';\r\nimport fetching from './fetch';\r\n\r\nfunction Item(props) {\r\n    const data = useRecoilValue(dataState), // Recoil value from data.js\r\n    resetData = useResetRecoilState(dataState), // Set recoil value from data.js to default\r\n    search = useRecoilValue(searchState), // State with search keyword and data\r\n    [ info, setInfo ] = useRecoilState(infoState), // For showing info of error\r\n    loading = document.getElementById('loading'), // Loading screen\r\n\r\n    { fetchDELETE, fetchPOST } = fetching; // Destructuring fetching object\r\n\r\n    // Check the type of the filter (or if there is no filter) and also check data status and return proper elements\r\n    function returnProperElements(type) {\r\n        let tasks; // For futher use\r\n\r\n        switch (type) {\r\n            case 'FILTER_UNDONE':\r\n                tasks = data.undone;\r\n                break;\r\n            case 'FILTER_DONE':\r\n                tasks = data.done;\r\n                break;\r\n            case 'FILTER_SEARCH':\r\n                tasks = search.data;\r\n                break;\r\n            default:\r\n                tasks = data.all;\r\n                break;\r\n        };\r\n\r\n        switch(data.status) {\r\n            case 'NO_DATA': // When there is no data fetched from server\r\n                return (\r\n                    <div id=\"loading\">\r\n                        <h2>\r\n                            Loading... \r\n                            <svg id=\"pencil\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-pencil\" viewBox=\"0 0 16 16\">\r\n                                <path d=\"M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z\"/>\r\n                            </svg>\r\n                        </h2>\r\n                    </div>\r\n                );\r\n            case 'NO_TASKS': // When data is fetched, but there is nothing\r\n                return (\r\n                    <div className=\"result\">\r\n                        Looks like there are no tasks available. Beer and chill? &#127866;&#128526;\r\n                    </div>\r\n                );\r\n            case 'CONNECTION_ERR': // When something bad happen\r\n                return (\r\n                    <div className=\"result\">\r\n                        Oh no, something bad happened to the internet! &#128552; Check your connection or try again later! &#128521;\r\n                    </div>\r\n                );\r\n            default: // When data is fetched and ready to use\r\n                let nr = 0;\r\n                if (tasks.length === 0) {\r\n                    let info;\r\n                    switch(type) { // All data is ready to use, but there is no filtered data\r\n                        case 'FILTER_SEARCH':\r\n                            info = <p>Looking for something particular? Let me help you! &#128526;</p>;\r\n                            break;\r\n                        case 'FILTER_DONE':\r\n                            info = <p>Looks like there are no tasks available. What about adding some new challenges? &#128526;</p>;\r\n                            break;\r\n                        case 'FILTER_UNDONE':\r\n                            info = <p>Looks like there are no tasks available. Beer and chill? &#127866;&#128526;</p>;\r\n                            break;\r\n                        default:\r\n                            info = <p>Looks like there are no tasks available. Beer and chill? &#127866;&#128526;</p>;\r\n                    }\r\n                    return (\r\n                        <div className=\"result\">\r\n                            {info}\r\n                        </div>\r\n                    )\r\n                } \r\n                return (\r\n                    tasks.map(el => {nr++;\r\n                        return <Task key={el.id} item={el} nr={nr} onDelete={(x) => deleteTask(x)} onInfo={(x) => showInfo(x)} onUpdate={(x, y, z) => updateTask(x, y, z)} />\r\n                    })\r\n                );\r\n        };\r\n    };\r\n\r\n    // Check edited note length before posting\r\n    function checkEdited(val) {\r\n        if (val.length > 200) {\r\n            props.showInfo('Too many characters! I can\\'t handle it! :(');\r\n            return false;\r\n        } else if (val.length < 5) {\r\n            props.showInfo('Even a small task need some words to describe. Try at least 5 characters! :)')\r\n            return false;\r\n        } else {\r\n            return true;\r\n        };\r\n    };\r\n\r\n    // Updating task to server\r\n    async function updateTask(type, item, value) {\r\n        let patch = {}; // Preparing grounf for the posting data\r\n\r\n        switch (type) { // Checking the type of the posting data\r\n            case 'DONE':\r\n                patch = {\r\n                    completed: true\r\n                };\r\n                break;\r\n            case 'UNDONE':\r\n                patch = {\r\n                    completed: false\r\n                };\r\n                break;\r\n            case 'EDITED':\r\n                if(!checkEdited(value)) return;\r\n                patch = {\r\n                    title: value,\r\n                };\r\n                break;\r\n            default:\r\n                return;\r\n        };\r\n        loading.classList.remove('invis'); // Turn on loading screen\r\n\r\n        const data = await fetchPOST(`https://gorest.co.in/public-api/todos/${item.id}`, \"PATCH\", patch); // POST data to server\r\n\r\n        resetData(); // Set recoil value in data.js to default\r\n        loading.classList.add('invis'); // Turn off loading screen\r\n        return data; // Return server response for no reason\r\n    };\r\n\r\n    // Deleting task from server\r\n    async function deleteTask(x) {\r\n        let check; // Preparing ground for confirm window\r\n        if (x.completed === false) { // If task is not completed yet\r\n            check = window.confirm('Do you reaaally want to delete this task? It seems it\\'s not done yet :/');\r\n        } else {\r\n            check = window.confirm('Do you really want to delete this task? It\\'s done, so no problem ;)');\r\n        }\r\n        if (check) { // If confirm window returns true\r\n            loading.classList.remove('invis'); // Turn on loading screen\r\n\r\n            const data = await fetchDELETE(`https://gorest.co.in/public-api/todos/${x.id}`); // DELETE data from server\r\n\r\n            resetData(); // Set recoil value in data.js to default\r\n            loading.classList.add('invis'); // Turn off loading screen\r\n            return data; // Return server response for no bloody reason\r\n        };\r\n    };\r\n\r\n    // Show proper info or error on screen\r\n    function showInfo(txt) {\r\n        setInfo(txt);\r\n        document.getElementById('info').classList.remove('invis');\r\n    };\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <Top />\r\n            {returnProperElements(props.type)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport Add from './Add';\r\nimport Item from './Item'\r\nimport dataState from '../recoils/data';\r\nimport userID from '../recoils/user';\r\nimport fetching from './fetch';\r\n\r\nfunction List() {\r\n    const [ data, setData ] = useRecoilState(dataState), // Set and use recoil value from data.js\r\n    user = useRecoilValue(userID), // Use recoil value from user.js\r\n\r\n    { fetchGET, accessToken } = fetching; // Destructuring fetching object\r\n\r\n\r\n    function downloadData() { // Download data from server\r\n\r\n        fetchGET(`https://gorest.co.in/public-api/users/${user}/todos?access-token=${accessToken}`) // GET data from server\r\n        .then(res => { // Response\r\n            if (res.code === (200 || 201) && res.data.length === 0) { // If data is fetched succesfully, but there is no tasks\r\n\r\n                updateDataState('NO_TASKS');\r\n                \r\n            } else if (res.code >= 400) { // When something go wrong\r\n\r\n                updateDataState('CONNECTION_ERR');\r\n\r\n            } else if (res.code === (200 || 201) && res.data.length > 0) { // If data is fetched succesfully and ready to use\r\n\r\n                updateDataState('READY', res.data, res.data.filter(f => f.completed === false), res.data.filter(f => f.completed === true));\r\n\r\n            }\r\n        })\r\n        .catch(err => { // If there is error that I'm not prepared for\r\n\r\n            updateDataState('CONNECTION_ERR');\r\n            console.log(`I detected some pointless and unwanted errors! Have a nice tea! ${err}`);\r\n\r\n        });\r\n    }\r\n\r\n\r\n    async function start() { // Start function called after setting recoil value in data.js to default\r\n        const res = await fetchGET(`https://gorest.co.in/public-api/users/${user}?access-token=${accessToken}`); // GET data from server\r\n\r\n        if (res.code === 404) start(); // If there is no particular user call that function again (to prevent starting the app without defined user)\r\n        else downloadData();\r\n    }\r\n\r\n    if (data.status === \"NO_DATA\") { // Checks if there was any change in recoil value from data.js (for example setting this recoil value to default)\r\n        start();\r\n    }\r\n\r\n    // Update recoil state - data.js, with default values\r\n    function updateDataState(status = 'NO_DATA', all = [], undone = [], done = []) {\r\n        setData({\r\n            status: status,\r\n            all: all,\r\n            undone: undone,\r\n            done: done\r\n        })\r\n    }\r\n\r\n    return ( // Using switch to easly swap between add, filter, search or view all data\r\n            <React.Fragment>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <Item />\r\n                    </Route>\r\n                    <Route path=\"/undone\">\r\n                        <Item type=\"FILTER_UNDONE\" />\r\n                    </Route>\r\n                    <Route path=\"/done\">\r\n                        <Item type=\"FILTER_DONE\" />\r\n                    </Route>\r\n                    <Route path=\"/add\">\r\n                        <Add />\r\n                    </Route>\r\n                    <Route path=\"/search\">\r\n                        <Item type=\"FILTER_SEARCH\" />\r\n                    </Route>\r\n                </Switch>\r\n            </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default List;\r\n","function Loading() { // Just loading screen\r\n    return (\r\n        <div id=\"loading\" className=\"invis\">\r\n            <h2>\r\n                Loading... \r\n                <svg id=\"pencil\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-pencil\" viewBox=\"0 0 16 16\">\r\n                    <path d=\"M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z\"/>\r\n                </svg>\r\n            </h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading;","function Footer() { // I think there is no need to explain this function\r\n    return (\r\n        <div className=\"footer\">\r\n            <p>&reg; Copyright 2021 - Daniel Krawczyk</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import { useRecoilValue } from 'recoil';\r\nimport infoState from '../recoils/info';\r\n\r\nfunction Info() { // For display info screen\r\n    const info = useRecoilValue(infoState);\r\n\r\n    return (\r\n        <div id=\"info\" className=\"invis\">\r\n            <span>\r\n                <h2>{info}</h2>\r\n                <button className=\"btn g op\" onClick={() => document.getElementById('info').classList.add('invis')}>Okay!</button>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Info;","import { RecoilRoot } from 'recoil';\r\nimport List from './components/List';\r\nimport Loading from './components/Loading';\r\nimport Footer from './components/Footer';\r\nimport Info from './components/Info';\r\n\r\nfunction App() {\r\n    return (\r\n        <RecoilRoot>\r\n            <List />\r\n            <Loading />\r\n            <Info />\r\n            <Footer />\r\n        </RecoilRoot>\r\n    )\r\n}\r\n\r\nexport default App;","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport Loading from './components/Loading';\nimport './styles/main.css';\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n      <Suspense fallback={<Loading />}>\n      <App />\n      </Suspense>\n  </Router>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}